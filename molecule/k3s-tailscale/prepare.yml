---

- name: Prepare
  hosts: server:agent:loadbalancer
  tags: tailscale_init
  tasks:
    - name: Init tailscale credentials variables
      ansible.builtin.include_tasks: ../default/init_tailscale_vars.yml

    - name: Install Tailscale with custom up argument
      ansible.builtin.include_role:
        name: artis3n.tailscale

    - name: Grab Tailscale Status
      ansible.builtin.command:
        cmd: tailscale status --json
      register: tailscale_status

    - name: Parse JSON from tailscale_status
      ansible.builtin.set_fact:
        tailscale_ip: "{{ (tailscale_status.stdout | from_json)['Self']['TailscaleIPs'][0] }}"
        tailscale_hostname: "{{ (tailscale_status.stdout | from_json)['Self']['HostName'] }}"

- name: Converge
  hosts: localhost
  tags: always
  tasks:
    - name: Add tailscale IP to inventory
      add_host:
        name: "{{ hostvars[item].tailscale_ip }}"
        groups: tailscale_hosts
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
        ansible_user: 'admin'
        ansible_ssh_pass: 'admin'
        ansible_become_pass: 'admin'
        tailscale_hostname: "{{ hostvars[item].tailscale_hostname }}"
      loop: "{{ groups['server'] + groups['agent'] + groups['loadbalancer'] }}"
      when: 
        - hostvars[item].tailscale_ip is defined
        - hostvars[item].tailscale_hostname is defined
      changed_when: False

- name: Prepare all nodes
  hosts: tailscale_hosts
  become: true
  tasks:
    - name: Ensure apt cache is updated
      ansible.builtin.apt:
        update_cache: true
      when: ansible_pkg_mgr == 'apt'

    - name: Ensure sudo is installed
      community.general.apk:
        name: sudo
        state: present
        update_cache: true
      when: ansible_pkg_mgr == 'apk'

    - name: Prepare Load Balancer | Ensure HAProxy is installed
      ansible.builtin.package:
        name: haproxy
        state: present
      when: tailscale_hostname == 'k3s-loadbalancer'

    - name: Prepare Load Balancer | Ensure HAProxy config directory exists
      ansible.builtin.file:
        path: /usr/local/etc/haproxy
        state: directory
        mode: 0755
      when: tailscale_hostname == 'k3s-loadbalancer'

    - name: Prepare Load Balancer | Ensure HAProxy is configured
      ansible.builtin.template:
        src: templates/haproxy-loadbalancer.conf.j2
        dest: /usr/local/etc/haproxy/haproxy.cfg
        mode: 0644
      when: tailscale_hostname == 'k3s-loadbalancer'
      tags: config_haproxy

    - name: Prepare Load Balancer | Ensure HAProxy service is started
      ansible.builtin.command:
        cmd: haproxy -D -f /usr/local/etc/haproxy/haproxy.cfg -p /var/run/haproxy.pid
      args:
        creates: /var/run/haproxy.pid
      when: tailscale_hostname == 'k3s-loadbalancer'

    - name: Prepare server/agent | Ensure apt cache is updated and iptables is installed
      ansible.builtin.apt:
        name: iptables
        state: present
        update_cache: true
      when: 
        - ansible_pkg_mgr == 'apt'

    - name: Prepare server/agent | Ensure iproute is installed
      ansible.builtin.dnf:
        name: iproute
        state: present
        update_cache: true
      when: 
        - ansible_pkg_mgr == 'dnf'